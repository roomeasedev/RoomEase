"use strict"

/**
 * re.feedController is a module which contains the logic for front-end UI operations
 * for the feed screen, as well as functions which perform all necessary wrapping of
 * request handler calls.
 */
re.feedController = (function() {
	var feedItems = {};
    
	/**
	 * Creates the JSON representing a feed item, which will not be added to the
	 * Database, but will be rendered using the Handlebars template for the feed view.
     * @param //TODO: ADD PARAM COMMENTS
     * @return {Object} JSON object with the proper format of a feed item, or null if
     *    the wrong type of item was passed as an argument
	 */
	function createFeedItem(input) {
		// TODO: implement the feed item creation
        if (input.type == "fridge_item") {
            return {
                'type': "fridge_item",
                'item': input.item
            };
        } else if (input.type == "reservation") {
            return {
                'type': "reservation",
                'item': input.
            };
        } else {
            console.log("Feed error, unknown item type");
            return null;
        }
        
	}

	/**
	 * Removes the given food item with the given ID from the group's
	 * food database (should only be called if the food has expired).
	 * @param {String} foodID the DB id number of the food item to be removed
	 */
	function removeExpiredFood(foodID) {
		// TODO: implement this function
        
        // Popup to confirm deletion of food
        // Make a call on DB to get fridge item with given ID and delete it
        // Remove item from local list of feed items
        // Hide the item  
	}

	/**
	 * Interaction function for the reservation items in the feed.
	 * Sends the user to the reservtion module with the filter set to
	 * the proper value so they can see the relevant reservation immediately.
	 * @param {String} reservationID the DB id number of the reservation item from feed
	 */
	function reservationInteract(reservationID) {
		// TODO: implement this function
        
        window.location.hash = "#reservations";
	}

	/**
	 * Gets the most recent feed items for the current user by grabbing
	 * their upcoming reservations and any expired food items for the
	 * entire group.
	 */
	function updateFeedItems() {
//        var test_fridge_items_item = {
//	"_id" : "123456789", //Generated by DB. All JSON objects WILL have this
//	"_rev" : "123456789",  //Generated by DB. All JSON objects WILL have this	
//	"type" : "fridge_item",
//	"item" : "Blueberries",
//	"group_id": "12344444", //_id of group
//	"expiration_date" : "111222334444", //Unix time
//	"owner" : "1112223335555", //FB ID
//	"sharable" : "yes" //Could have granularity(IE "yes", "no", "ask")
//}
        
//        var test_reservations_item = {
//	"_id" : "123456789", //Generated by DB. All JSON objects WILL have this
//	"_rev" : "123456789",  //Generated by DB. All JSON objects WILL have this
//	"type": "reservation",
//	"name_of_item" : "TV",
//	"group_num" : "1234454", //_id of group
//	"start_time" : "12:34",
//	"end_time" : "12:34",
//    "start_date" : "yyyy-mm-dd",
//    "end_date" : "yyyy-mm-dd",
//	"uid" : "1234444444" //FB id of the person who reserved the item
//}
        
        var fridgeItems = requestHandler.getAllItemsOfType("fridge_item", function(allItems, error) {
            for (var i = 0; i < allItems.length; i++) {
                var item = allItems[i];

                var expDate = new Date(item.expiration_date);
                var currDate = new Date();

                var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds
                var diffDays = Math.ceil((expDate.getTime() - currDate.getTime())/oneDay);

                /* Because of the ceiling the diffdays will almost never be 0 to
                 * account for this we set the expiration to 0 if diffdays is -1.
                 * This is in order to show the user that an item is expiring today.
                 * All other items that have expired are set to -1 simply to show the
                 * user that their food has expired.
                 */
                if(diffDays == -1) {
                    item.expiration_date = 0;
                } else if (diffDays < -1) {
                    item.expiration_date = -1;
                } else {
                    item.expiration_date = diffDays;
                }

                if (item.expiration_date <= 0) {
                    feedItems.push(createFeedItem(item));
                }
            }
            var reservationItems = requestHandler.getAllItemsOfType("reservation", function(allItems, error) {
                for (var i = 0; i < allItems.length; i++) {

                }
            });
        });
    }

	// Return the public API of re.feedController, which allows the fields
	// and methods listed in this object to be visible to the other modules.
	return {
		'feedItems': feedItems,
		'createFeedItem': createFeedItem,
		'removeExpiredFood': removeExpiredFood,
		'reservationInteract': reservationInteract,
		'updateFeedItems': updateFeedItems,
		'listModuleButton': listModuleButton,
		'reservationModuleButton': reservationModuleButton,
		'fridgeModuleButton':	fridgeModuleButton
	};
})();
